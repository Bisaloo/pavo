%ScholarOne also provide the following basic guidelines for uploading a LaTeX formatted manuscript:
%1.  Always upload the main LaTeX file first, selecting the file designation of Main Document.
%2.  Then, upload each file that is related to the main .TEX file and is needed for processing, selecting the file designation of TeX/LaTeX Suppl File.
%3.  Be sure to upload all style sheets, reference files, and at least one bibliography file, that are part of the document.
%4.  All image files must be saved and uploaded in .EPS format in order for the file to properly format and convert.
%5.  If changes are made to the main LaTeX document after all of the related files have been uploaded, all supplementary LaTeX files will have to be removed and re-uploaded.


\documentclass[times,mee,doublespace]{besauth}

\usepackage{hyperref}
\usepackage{lineno}
\usepackage{float}
\usepackage{subcaption}

% Macros
\newcommand{\pavo}{{\tt pavo}}  
\newcommand{\code}[1]{{\tt #1}}

\begin{document}
\SweaveOpts{concordance=TRUE, prefix.string=fig/ms}

%%%%%%%%%%%%
%TITLE PAGE%
%%%%%%%%%%%%
\linenumbers

\runningheads{R. Maia \textit{et al.}}{\pavo{}: R package for colour analysis}

\papertype{Application}

\title{\pavo{}: an R package for the analysis, visualization and organization of spectral colour data}

\author{Rafael Maia\affil{1}\corrauth\, Chad M. Eliason\affil{1}, Pierre-Paul Bitton\affil{2}, St\'{e}phanie M. Doucet\affil{2} and Matthew D. Shawkey\affil{1}} 

\address{\affilnum{1}Department of Biology, Integrated Bioscience Program, University of Akron, Akron, OH 44325- 3908, USA.; and \affilnum{2}Department of Biological Sciences, 401 Sunset Avenue, Biology Building, University of Windsor, Windsor, Ontario, Canada, N9B 3P4.}

\corraddr{rm72zips.uakron.edu}

%\cgs{grant sponsor name (no number)}
%\cgsn{grant1{1}, grant2{2}}{123, 456}

\begin{abstract} 

\begin{enumerate} 

\item Recent technical, methodological and empirical advances have led to a dramatic increase in
the use of spectrophotometry to quantify reflectance properties of biological material and of models
to determine how these colours are perceived by the animals themselves , providing important
insights to ecological and evolutionary aspects of animal visual communication.

\item Despite this growing interest, a unified framework for analyzing and visualizing spectral data 
has not been available. We introduce \pavo{}, an R package that facilitates the organization, 
visualization, and analysis of spectral data in a cohesive framework. \pavo{} is highly flexible: 
it allows the user to (a) organize and manipulate  data from a variety of sources, (b) visualize data 
using R's state-of-the-art graphics capabilities, and (c) analyze data using visual system modeling 
for a broad range of taxa.

\item In this paper, we present a summary of the functions implemented in \pavo{}, suggest a
workflow to explore spectral data, and model colours using user-defined visual systems. We also
present  an exact solution for the calculation of colour volume overlap in colourspace, thus
expanding previously published methodologies.

\item As an example of \pavo{}'s capabilities, we compare the colour patterns of three African Glossy
Starling species, two of which have diverged very recently. Using spectral data and avian visual
models, we show that colour disparity between the recently diverged species is as great as that
between them and the more distantly related species. The flexibility and streamlined workflow of
pavo{} is demonstrated through use of different visual models and several plotting capabilities.

\item \pavo{} provides a cohesive environment capable of addressing complex sensory ecology questions
that previously required the use of multiple, sometimes restricted, programs.

\end{enumerate} 

\end{abstract}

\keywords{animal communication, colourspace, just noticeable differences, receptor noise, sensory ecology, spectrophotometry, visual model}

\maketitle

%<<echo=FALSE, results=hide>>=
%library(pavo)
%ps.options(pointsize=12)
%options(width=60)
%@

\section{Introduction}

The role of colouration and colour vision in animal communication has been a fundamental question in
evolutionary biology for many decades \citep{darwin:1859,darwin:1896, Poulton:1890,Bennett:2007hm}.
Studies on visual communication have shed light on various aspects of natural
\citep{Chittka:1992} and sexual selection \citep{Hill:2002}, and how these interact
\citep{Kemp:2009}. It is also an ideal system for truly integrative biological research, spanning
from the optical processes generating colour \citep{Shawkey:2009}, hormonal and genetic mechanisms
regulating phenotype \citep{Muller:2009}, physiological processes involved in perceiving the signal
\citep{Hart:2001}, and its adaptive and evolutionary patterns \citep{Badyaev:2003,Darst:2006}.

However, ``colour'' refers to a sensory experience, not an objective quantity, and the realization
that animals can vary quite considerably in their visual system and how they process this
information prompted two important methodological advances. First, it highlighted the need for an
objective quantification of the colour reflected by surfaces, as a first approximation of a
``receiver-independent'' measure of an organism or object's colour
\citep{Endler:1993wm,Eaton:2003,Bennett:2007hm}. Over the last 20 years, the rising
popularity of portable spectrophotometers have made objective quantification of the spectral
properties of animal and plant integuments commonplace
\citep{Endler:1990,Eaton:2003,Andersson:2006}. Second, advances in the understanding of perception
and processing of colour have allowed analysis of reflectance data using visual models that estimate
how animals see and differentiate these colours
\citep{Goldsmith:1990,Tovee:1995vv,Vorobyev:1998,Vorobyev:1998to}.

Because of these advances, a cohesive framework for working with and analyzing colour from
reflectance data is needed. Output file types from spectrophotometer manufacturers are not
standardized, and software programsfor analyses are limited either in the methods they implement,
the types of data they import and process, or the platforms in which they are available. Moreover,
many are proprietary and/or closed, making customization impossible \citep[for a review of available
software, see][]{Montgomerie:2006}. colour data often require additional conversion and export into
statistical software for analyses, restricting  protocol standardization across labs, and batch
processing automation of workflows. Combined with published descriptions that are often poorly
detailed or inconsistent, the current procedures and implementations severely hinder the
reproducibility of research and the reimplementation of methods.

We introduce \pavo{} \textendash \; a package for R \citep{rcore} that addresses these problems by
providing a flexible, yet cohesive, environment in which researchers can organize, analyze and
visualize colour data generated by spectrophotometry. R is also open source and multi-platform, and
is rapidly becoming the working language for scientific programming and data analysis, particularly
in ecology and evolution \citep[e.g.][]{ape,Bolker:2008}. \pavo{} incorporates R's flexibility by
using object classes that can seamlessly interpret each other, providing functions that can be used
to import, explore, process and analyze spectral colour data under a variety of user-defined 
models. We propose that combining these procedures under a coherent framework not only
streamlines workflow, but also allows data to be explored and manipulated in ways that can be used
to visualize patterns, obtain information and develop and test hypotheses (Figure
\ref{figure:work}).

\begin{center}\fbox{Figure \ref{figure:work} about here}\end{center}

\section{The \pavo{} package}

The stable release of \pavo{} is available from CRAN (\url{http://cran.r-project.org/}) for direct
installation from R, and the development version is available from github
(\url{https://github.com/rmaia/pavo}). \pavo{} was developed with three main workflow stages in mind
(Figure \ref{figure:work}): \textbf{organization} of spectral data by inputting raw files and
processing their spectral content; \textbf{visualization} of the output, including exploratory
capacities to identify further required manipulations and previously unconsidered patterns; and
\textbf{analysis} of data from the spectral shape of reflectance curves or by incorporating receiver
psychophysiology in visual models (Figure \ref{figure:work}). As noted by \cite{Bennett:2007hm} and
others \citep{Andersson:2006, Montgomerie:2006}, though spectral data have become commonplace in
studies of animal colouration, it is easy to obtain poor-quality or inaccurate data. Therefore a
workflow for spectral colour data analysis has to go beyond a ``plug and chug'' implementation,
requiring thorough exploratory investigation. With this in mind, \pavo{} takes advantage of R's
object-oriented programming environment, as outlined below.

\subsection{Organization}

Spectral data are stored in \pavo{} and recognized for its functions by use of a new object class,
\code{"rspec"}, which inherits methods from \code{data.frame}. Objects of class \code{rspec} are
characterized by having individual reflectance spectra as columns of the data frame, with a first
column containing the associated wavelength values. Raw spectral data can be imported using the
function \code{getspec}, which currently supports data from a variety of spectrophotometer and
microspectrophotometer models (Ocean Optics OOIBase and SpectraSuite files, Avantes AvaSpec, and
CRAIC). In addition, previously compiled spectral data can be imported into R and converted to
\code{rspec} objects using the \code{as.rspec} function.


The use of dedicated R object classes allows generic functions like \code{plot} and \code{summary}
to identify the object as a particular type of data frame and interpret it accordingly (see below).
The class \code{"vismodel"} is used to interpret spectral data that has been processed through one
of the visual models implemented, and also stores information on how it was generated (e.g. the
visual phenotype, background and illuminant used, and any transformations applied; see below).
Additionally, the \code{"tcs"} class refers to tetrahedral colourspace models
\citep{Endler:2005,Stoddard:2008}, and the \code{summary} function can be used to extract summary
variables, like the colour volume or hue span \citep{Stoddard:2008} for groups and subsets of points.

It is common when collecting spectral data to take multiple measurements from the same sample,
averaging these to avoid sampling error \citep{Quesada:2006}. \code{pavo} provides the
\code{aggspec} function for this purpose, as well as the \code{procspec} function for noise removal
via smoothing, and transformations to standardize and clean spectral data.

\subsection{Visualization}

With \pavo{} installed and loaded, the \code{plot} function recognizes \code{rspec} objects and
plots them accordingly \textendash \; interpreting the first column as wavelengths (usually
using it as the x axis) and the remaining columns as reflectance values (y values) for individual
spectra. Several plotting options for multiple spectra are implemented (Figure \ref{figure:work}).
In addition, the \code{aggplot} function provides plotting capabilities for among-spectra summary
statistics plotting (Figure \ref{figure:work}), with a similar syntax to \code{aggspec}. \pavo{}
also offers exploratory plotting capabilities that can be combined with data processing and
formatting, such as \code{explorespec} (for visualizing groups of spectra) and \code{smoothplot}
(for choosing smoothening parameters; Figure \ref{figure:work}).

Finally, \pavo{} offers plotting capabilities for the avian tetrachromatic colourspace model
\citep{Stoddard:2008, Endler:2005} through the \code{tcsplot} and \code{projplot} functions (Figure
\ref{figure:work}, see below).

\subsection{Analysis}

The \code{summary} function can be applied to \code{rspec} objects to produce several colorimetric
(hue, saturation and brightness)  variables extracted from the spectral shape of the
reflectance curve. This function calculates variables previously described in the literature
\citep[summarized in][]{Montgomerie:2006} for the spectra contained in the \code{rspec} input object
(description and formulae for the variables can be found in the help file, by typing
\code{?summary.rspec}, and in the package Vignette \textendash \; see Supporting Information).
Additionally, the function \code{peakshape} provides descriptors of spectral peaks, such as the
wavelength of maximum reflectance and the full width at half maximum, and can be fine-tuned to
extract information from specific areas of the curve. This implementation can be useful when the
spectral curve has multiple peaks or a complex shape (e.g. describing the UV peak of carotenoid
curves, Figure \ref{figure:work}).

\pavo{} also allows the easy production of models that incorporate the visual system of the receiver
through the \code{vismodel} function. Models can be calculated incorporating the visual phenotype
(cone absorbance), background colour, and ambient illuminant \citep{Vorobyev:1998}. Several avian
receptor phenotypes \citep{Hart:2001,Endler:2005} are implemented as options, but user-defined
receptor data from any taxon can be used as model input. Further, the \code{sensmodel} function
implements the calculation of cone absorbance curves based on peak sensitivity information
\citep[available from the literature, e.g.][]{Hart:2001}, and can also include oil droplet and
ocular transmission information in the calculations \citep{Govardovskii:2000,Hart:2005}.

Visual models can be calculated in terms of absolute photon catches, in which case the receptor
noise model can be used to infer contrast between colours \citep[implemented in the function
\code{colordist}][]{Vorobyev:1998} or in relative cone stimulation, in which case the model reduces
to a colourspace model represented in $n-1$ dimensions \citep[where $n$ is the number of different
receptors involved in colour vision][]{Goldsmith:1990,Endler:2005,Stoddard:2008}. Absolute or
relative cone stimulation can be selected by the logical argument \code{relative} from the
\code{vismodel} function. In the case of the avian tetrahedral colourspace, several additional
variables can be calculated based on spherical coordinates which represent the hue based on the
angles and saturation based on the distance from the achromatic center \citep[see][]{Stoddard:2008}
by calling the \code{tcs} function. This function generates an object of class \code{tcs}; a
\code{summary} call from a \code{tcs} object will return summary statistics described in
\cite{Stoddard:2008} for sets of points (see below).

\pavo{} also builds upon previously described visual model methods. For example,
\cite{Stoddard:2011} present the useful technique of calculating the overlap between the volumes
defined by two sets of points in colourspace. They used this metric to quantify mimicry
\citep{Stoddard:2011,Stoddard:2012}, such that a greater volume overlap would indicate greater
overall colour similarity. Given the complexity of calculating the intersection of three-dimensional
convex hulls, \cite{Stoddard:2011} used a Monte Carlo approach to estimate the degree of volume
overlap. \pavo{}, instead, provides the exact solution for the calculation of the intersection of
colour volumes, using a method originally implemented to calculate the overlap between
multidimensional niches \citep{Villeger:2011} through the computational geometry capabilities
available from the \code{rcdd} package \citep{rcdd} (For performance and precision comparison, see
Supplemental Information)

\section{Example: colourspace divergence in glossy starlings (Sturnidae)}


Glossy starlings from the African clade have bright and diverse iridescent colours likely used in
courtship displays and social competition \citep{Rubenstein:2009}. Here we exemplify some of \pavo{}'s
capabilities and workflow by comparing the colours of a monophyletic clade of three glossy starling
species.

<<echo=F,results=hide>>=
require(RColorBrewer)
require(pavo)
# source('~/github/pavo/R/aggspec.R')  # not needed now that we've fixed it in v. 0.1-2
pal <- brewer.pal(7, "Set1")
pal2 <- brewer.pal(11, "Spectral")
@

\subsection{Step 1: Organization and Processing}

The data consist of reflectance spectra (in Avantes ``.ttt'' output format) taken from museum
specimens of the three species. We measured reflectance spectra from 11 plumage patches (see
Figure \ref{figure:distplot} for list) of four males per species. Three measurements 
from different locations within each patches were collected. We loaded these 396 
raw spectral data files, averaged the spectra within patches and removed electrical noise arising from 
the spectrometer (using local polynomial regression fitting, or loess) using the following annotated
lines of code in \pavo{}:

% demo input of raw data
<<echo=TRUE,results=hide,eval=FALSE>>=
specs <- getspec(where='/Desktop/glossystarlings', ext='ttt', lim=c(300, 700))  # get raw data
specs <- aggspec(specs, by=3, FUN=mean)  # average by groups of 3 spectral curves
specs <- procspec(specs, opt='smooth')  # remove electrical noise using Gaussian smoothing
@
<<echo=FALSE, results=hide>>=
load('~/github/pavo/toydata/ACE.RData')
specs <- as.rspec(cbind(eliz, chlo[,-1], acut[,-1]))
# Create metadata
spp <- sapply(strsplit(names(specs), "\\."), "[", 1)
ids <- sapply(strsplit(names(specs), "\\."), "[", 2)
sex <- sapply(strsplit(names(specs), "\\."), "[", 3)
patch <- sapply(strsplit(names(specs), "\\."), "[", 4)
# Get equal sample sizes by sampling randomly from L. chloropterus, L. acuticaudus
set.seed(101)
p <- sample(unique(ids[spp=="LAAC"&sex=="MAL"]), size = 4)
acut.sub <- cbind(wl = 300:700, specs[, ids%in%p])
acut.sub <- as.rspec(acut.sub)
set.seed(101)
p <- sample(unique(ids[spp=="LACL"&sex=="MAL"]), size=4)
chlo.sub <- cbind(wl = 300:700, specs[, ids%in%p])
chlo.sub <- as.rspec(chlo.sub)
# Get only males from L. elisabeth
eliz.sub <- eliz[, grep('MAL', names(eliz))]  # get only males
eliz.sub <- as.rspec(cbind(wl = 300:700, eliz.sub))
# Combine subsetted rspec objects
specs <- as.rspec(cbind(eliz.sub, chlo.sub[,-1], acut.sub[,-1]))
spp <- sapply(strsplit(names(specs), "\\."), "[", 1)
ids <- sapply(strsplit(names(specs), "\\."), "[", 2)
sex <- sapply(strsplit(names(specs), "\\."), "[", 3)
patch <- sapply(strsplit(names(specs), "\\."), "[", 4)
@

\subsection{Step 2: Visualization}

Next, we plotted spectra contained in this \code{rspec} object. We used \code{aggplot} to visualize
the mean reflectance curves for each body part from each species. Below we show the code used to 
produce one of these plots for the ``belly'' body patch (Figure \ref{figure:distplot}B):

% CE - fix this so that the code will actually work w/input spectra
<<echo=TRUE,eval=FALSE>>=
specs.belly <- specs[,1:13]  # subset wavelength column and the 12 spectra from the belly patch
spp <- substr(names(specs.belly),1,4)[-1]  # extract 4 characters from column names (species labels)
aggplot(specs.belly, by=spp)  # average and plot spectral data by species
@

<<echo=F,results=hide>>=
# Process spectra (apply smoothing) and average by species and patch
specs.sm <- procspec(specs, opt='smooth')
specs.m <- aggspec(specs.sm, by = paste(spp, patch)[-1])
spp.m <- sapply(strsplit(names(specs.m), "\\."), "[", 1)
sex.m <- sapply(strsplit(names(specs.m), "\\."), "[", 3)
patch.m <- sapply(strsplit(names(specs.m), "\\."), "[", 4)
@

\subsection{Step 3: Analysis}

To quantify spectral reflectance and understand how these colours are perceived by birds, we used
the \code{summary.rspec} and \code{vismodel} functions, respectively. The latter takes into account
avian visual sensitivities (sensory phenotype). \pavo{} incorporates available data on the retinal
sensitivities of numerous taxa, including the European starling (\emph{Sturnus vulgaris},
\code{visual='star'}), which we incorporated here \citep{Hart:1998}. We used both the
\code{relative=FALSE} and \code{relative=TRUE} options of the \code{vismodel} function to measure
colour attributes using the receptor noise and colourspace models, respectively.

\subsubsection{Colour distances}

We used \code{relative=FALSE} to calculate raw photon catch values for the four avian
photoreceptor classes (\{\emph{usml}\}), suitable for calculating chromatic distances \citep[$\Delta
S$,][]{Vorobyev:1998to}. We used relative cone abundances (arguments \code{n1, n2, n3, and n4}) for
the European starling \citep{Hart:1998}, which can be easily passed as arguments to the
\code{coldist} function. The \code{v} argument was set to 0.1 to give a \{\emph{"l"}\} cone Weber
fraction of approximately 0.05 \citep{Vorobyev:1998,Vorobyev:1998to}. The results of \code{coldist}
give colour distances (chromatic , $\Delta S$, Figure \ref{figure:distplot};  and achromatic,
$\Delta L$, not shown) between all possible combinations of plumage patches in the \code{tcs}
object, and can be further subset (using  the \code{subset} argument) to only analyse comparisons of
interest (e.g., colour difference between  homologous patches of two species). This argument employs
\code{R}'s built-in \code{grep} functionality, and is thus very flexible, as users can input a
string to match partial column names  within an \code{rspec} object. For example:

<<>>=
vm.star <- vismodel(specs, visual='star', relative=FALSE)
deltas <- coldist(vm.star, qcatch='fi', n1=1, n2=1.38, n3=3.34, n4=3.46, v=0.1)
# subset only comparisons between belly spectra
deltas.wing <- coldist(vm.star, qcatch='fi', n1=1, n2=1.38, n3=3.34, n4=3.46, v=0.1, subset="wing")
head(deltas.wing)
@

We can see from Figure \ref{figure:distplot}A that the recently divergent \emph{L. chloropterus} and
\emph{L. elisabeth} have accumulated similar levels of color disparity among them as they have to
their sister species, \emph{L. acuticaudus}. Considering a value of 1 as a threshold for Just
Noticeable Differences (JNDs, Figure \ref{figure:distplot}A dashed lines) nearly all plumage patch
comparisons yield colors that are discernible to the starling visual system, both within the
\emph{L. chloropterus-L. elisabeth} subclade as well as compared to the \emph{L. acuticaudus}
outgroup. This becomes clear when comparing the results for the most contrasting body patches
(``belly'') to their spectral curves (see Figure \ref{figure:distplot}B). 

\subsubsection{Spectral analysis}

Another strength of \code{pavo} is its ability to compare colour metrics computed in different
colour spaces. For example, we extracted and plotted an objective hue metric (wavelength of peak
reflectance) for comparison with visual model results in Figure \ref{figure:distplot}A, as shown in
Figure \ref{figure:distplot}C (see \citep{Andersson:2006} for discussion):

<<echo=TRUE,eval=FALSE,results=hide>>=
colr <- summary(specs.belly)  # extract colour variables
hue <- colr$H1
boxplot(hue~spp)  # make boxplots of hue (H1) by species
@

<<echo=FALSE,results=hide>>=
# 5. Run visual models using starling visual sensitivies
vm1 <- vismodel(specs, visual='star', relative=TRUE)
vm2 <- vismodel(specs, visual='star', relative=FALSE)
@
<<echo=FALSE,results=hide>>=
res <- list()
for (i in unique(patch)[-1]) {
  sel <- grep(i, deltas$patch1)[grep(i, deltas$patch1)%in%grep(i, deltas$patch2)]
  res[[i]] <- deltas[sel, ]
}
# head(res[[1]])  # check output
# Calculate distance from focal species' patch to those of other species
se <- function(x){sd(x)/sqrt(length(x))}

d12 <- matrix(ncol = 2, nrow = 11)
for (i in 1:11) {
  p <- intersect(grep('LACL', res[[i]]$patch1), grep('LAAC', res[[i]]$patch2))
  x <- res[[i]][p, ]
  # x <- res[[i]][grep('LACL', res[[i]]$patch1)[grep('LACL', res[[i]]$patch1) %in% 
  #               grep('LAAC', res[[i]]$patch2)], ]
  d12[i, 1] <- mean(x$tetra.dS)
  d12[i, 2] <- se(x$tetra.dS)
}
rownames(d12) <- names(res)
colnames(d12) <- c('mean', 'se')

d13 <- matrix(ncol = 2, nrow = 11)
for (i in 1:11) {
  p <- intersect(grep('LAEL', res[[i]]$patch1), grep('LAAC', res[[i]]$patch2))
  x <- res[[i]][p, ]
  # x <- res[[i]][grep('LAEL', res[[i]]$patch1)[grep('LAEL', res[[i]]$patch1) %in% 
  #               grep('LAAC', res[[i]]$patch2)], ]
  d13[i, 1] <- mean(x$tetra.dS)
  d13[i, 2] <- se(x$tetra.dS)
}
rownames(d13) <- names(res)
colnames(d13) <- c('mean', 'se')

d23 <- matrix(ncol = 2, nrow = 11)
for (i in 1:11) {
  p <- intersect(grep('LAEL', res[[i]]$patch1), grep('LACL', res[[i]]$patch2))
  x <- res[[i]][p, ]
  # x <- res[[i]][grep('LAEL', res[[i]]$patch1)[grep('LAEL', res[[i]]$patch1) %in% 
  #               grep('LACL', res[[i]]$patch2)], ]
  d23[i, 1] <- mean(x$tetra.dS)
  d23[i, 2] <- se(x$tetra.dS)
}
rownames(d23) <- names(res)
colnames(d23) <- c('mean', 'se')
@
<<echo=FALSE,results=hide>>=
rs <- names(sort(rank(rowMeans(cbind(d12[,1], d13[,1], d23[,1])))))
@

<<label=distplot,fig=TRUE,echo=FALSE,results=hide,include=FALSE,width=7,height=7>>=
pal <- brewer.pal(7, "Set1")
# Dotplot of colour distances
layout(matrix(c(1,2,1,3), nrow=2))
pad <- .35
par(mar=c(4,4,2,2), oma=c(2,0,0,0), xpd=FALSE, ps=12)
plot(d23[rs,1], ylim = c(0, 11), xlab = "", 
     ylab = '', xaxt = 'n', 
     pch = 21, xlim = c(0.5, 22), type='n')
segments(seq(1,22,by=2)-pad, d12[rs, 1] - d12[rs, 2], seq(1,22,by=2)-pad, 
         d12[rs, 1] + d12[rs, 2])
segments(seq(1,22,by=2), d13[rs, 1] - d13[rs, 2], seq(1,22,by=2), d13[rs, 1] + 
         d13[rs, 2])
segments(seq(1,22,by=2)+pad, d23[rs, 1] - d23[rs, 2], seq(1,22,by=2)+pad, 
         d23[rs, 1] + d23[rs, 2])
points(d12[rs, 1]~I(seq(1,22,by=2)-pad), pch = 21, bg = 'black', cex=1.2)
points(d13[rs, 1]~seq(1,22,by=2), pch = 21, bg = 'grey', cex=1.2)
points(d23[rs,1]~I(seq(1,22,by=2)+pad), pch = 21, bg = 'white', cex=1.2)
abline(h = 1, lty = 3)
#axis(side = 1, at = seq(1,22,by=2), labels = rs, las = 1, cex.axis=0.9)
axis(side = 1, at = seq(1,22,by=2), labels = rep('',11), las = 1, cex.axis=0.9)
text(seq(1,22,by=2),par("usr")[3]-0.7,srt=35,adj=1,labels=rs,xpd=T,cex=1.1)
mtext(side = 2, expression(paste(Delta, "S (JNDs)")), line=2.5)
mtext(side = 1, "plumage patch", line=3.5)
par(font=3)
legend('topleft', bty='n', pch=c(21,21,21), cex=1.2,
       legend = c("acuticaudus-chloropterus", "acuticaudus-elisabeth",
        "chloropterus-elisabeth"), pt.bg=c('black','grey','white'))
par(font=1)
mtext("A", at=-2.5, line=-1.5, cex=1.5, font=2)

# Belly spectra plotted w/aggplot
p <- grep('belly', names(specs))
aggplot(specs.sm[,c(1,p)], by=substr(names(specs.sm)[p], 1, 4), alpha=.3, lwd=2, ylim=c(0,50), ylab='',xlab='')
# text(300,40,'belly', pos=4)
par(font=3)
legend('topleft', lty=1, lwd=2, col=pal[c(1:3)],
       legend=c('L. elisabeth', 'L. chloropterus', 'L. acuticaudus'), bty='n')
par(font=1)
mtext(side = 2, 'Reflectance (%)', line=2.7)
mtext(side = 1, "Wavelength (nm)", line=3)
mtext("B", at=187, line=-1.5, cex=1.5, font=2)

# Boxplot of belly hues calculated w/summary.rspec
colr <- summary(specs.sm)
nm <- row.names(colr)
colr <- colr[grep("wing|belly",nm), ]  # just belly, wing patches
spp2 <- substr(row.names(colr), 1, 4)
df <- setNames(as.data.frame(do.call(rbind, strsplit(row.names(colr), "\\."))), c("spp", "id", "sex", "patch"))
df$H1 <- colr$H1
names(df) <- c("spp", "id", "sex", "patch", "H1")
boxplot(H1~spp, subset(df, patch=="belly"), xlab="Species", ylab="Hue (nm)")
mtext("C", at=187, line=-1.5, cex=1.5, font=2)
@

\begin{center}\fbox{Figure \ref{figure:distplot} about here}\end{center}

<<echo=FALSE,results=hide>>=
# 7. Calculate tetra colourspace variables
tcs1 <- tcs(vm1)
@

<<tetracolourspaceplot,echo=FALSE,results=hide>>=
# Plot species in colourspace
tcs1$spp <- sapply(strsplit(rownames(tcs1), "\\."), "[", 1)
tcs1$patch <- sapply(strsplit(rownames(tcs1), "\\."), "[", 4)
tcs1$both <- paste(tcs1$spp, tcs1$patch)
tcs1.m <- aggregate(.~both, data=tcs1[,-c(17,18)], mean)
tcs1a <- tcs1.m[grep('LAAC', tcs1.m$both),]
tcs1b <- tcs1.m[grep('LACL', tcs1.m$both),]
tcs1c <- tcs1.m[grep('LAEL', tcs1.m$both),]
# green=LAAC, blue=LACL, red=LAEL
# pal <- brewer.pal(3, "Set1")[c(3,1,2)]
# size <- c(.01,.007,rep(.002,9))
# pal3 <- c('black', grey(.6), grey(.9))[c(1,2,rep(3,9))]
# view3d(theta=35,phi=-90,fov=1,zoom=.35)
# open3d()
# tcspoints(tcs1a, col=pal[1], size=size)
# tcsvol(tcs1a, col=pal[1], fill=T)
# tcspoints(tcs1b, col=pal[2], size=size)
# tcsvol(tcs1b, col=pal[2],fill=T)
# tcspoints(tcs1c, col=pal[3], size=size)
# tcsvol(tcs1c, col=pal[3], fill=TRUE)
# view <- par3d(no.readonly=TRUE)
# par3d(view)
# rgl.snapshot('ms-volplot.png')
@

\subsubsection{Avian tetrahedral colourspace}

To analyse these spectra in avian tetrahedral colourspace, we used \code{vismodel} again, this time
specifying \code{relative=TRUE} to indicate that \{\emph{usml}\} values should be scaled to sum of
unity for each patch. Then we used the \code{voloverlap} function to calculate the volumes occupied
by each species' plumage patches, as well as their overlaps. The \code{plot=TRUE} option provides a
useful graphical representation of the overlap in colourspace (Figure \ref{figure:volplot}b). The
code below shows how we computed the volume overlap between the two recently diverged species, as
shown in Figure \ref{figure:volplot}):

<<echo=TRUE,eval=FALSE,fig=F,include=F>>=
vm.star.rel <- vismodel(specs, visual='star', relative=TRUE)
tcs.star <- tcs(vismodeldata = vm.star.rel)
#subset points from the two species
tcs.lael <- tcs[grep('LAEL', row.names(tcs.star))]
tcs.lacl <- tcs[grep('LACL', row.names(tcs.star))]
voloverlap(tcs.lael, tcs.lacl, plot=TRUE)
@

% DOES THIS NEED TO BE HERE?
% <<echo=FALSE,eval=T, fig=F,include=F>>=
% voloverlap(tcs1b, tcs1c, plot=FALSE)
% @

% code to produce plot
% <<echo=F,results=hide>>=
% voloverlap(tcs1b, tcs1c, plot=T)
% par3d(view)
% setwd('~/github/pavo/manuscript/fig/')
% rgl.snapshot('ms-volplot.png')
% @

\begin{center}\fbox{Figure \ref{figure:volplot} about here}\end{center}



\section{Citation of methods implemented in \pavo{}}

Most of the methods implemented in \pavo{} have been thoroughly described in their original
publications, to which users should refer for details and interpretation. For summary colorimetric
variables and spectral shape analysis of reflectance curves, see \cite{Montgomerie:2006}. For visual
models based on photon catches and receptor noise, see \cite{Vorobyev:1998} and
\cite{Vorobyev:1998to}. For visual phenotype sensitivity curve estimation, see
\cite{Govardovskii:2000} and \cite{Hart:2005}. For tetrahedral colourspace models, see
\cite{Endler:2005} and \cite{Stoddard:2008}, and for colour volume overlap see \cite{Stoddard:2011}
and \cite{Stoddard:2012}. Users of the functions that apply these methods must cite the original
sources along with \pavo{}.

\begin{acks} We would like to thank Jarrod D. Hadfield and Mary Casswell Stoddard for sharing code
that helped  us develop some of \pavo{}'s capabilities. This work was supported by the NSF grant
DEB-1210630, AMNH Chapman research grant and Sigma XI GIAR (R.M.), HFSP grant RGY0083, AFOSR grant
FA9550-09-1-0159 (M.D.S.),  the University of Akron (M.D.S., R.M., C.M.E.), NSERC Discovery grant and 
Equipment grant (S.M.D), and NSERC Graduate Scholarship (P.-P.B.).
\end{acks}

\bibliographystyle{bes}
\bibliography{references}

\clearpage

\begin{figure}
\centering
\includegraphics{fig/ms-workflow-3}
\caption{Example \pavo{} workflow, highlighting its main functions and plotting capabilities}
\label{figure:work}
\end{figure}

\clearpage

\begin{figure}
\centering
\includegraphics{fig/ms-distplot}
\caption{\textbf{A}: Dotplot showing color distances (in units of just noticeable differences, JNDs) by patch (y-axis) for three pairs of African starling species (Sturnidae). Dotted vertical lines indicate JND=1, above which the pair of colour patches is considered to be distinguishable by birds. Points indicate chromatic distances between different pairs of species: \emph{Lamprotornis chloropterus} and \emph{L. elisabeth} (open circles); \emph{L. acuticaudus} and \emph{L. elisabeth} (grey circles); and \emph{L. acuticaudus} and \emph{L. chloropterus} (black circles). Error bars show +/- one standard error. \textbf{B,C}: Plots of mean smoothed spectra for different body patches (B: wing, C: belly). Line colors indicate species (green: \emph{L. acuticaudus}, red: \emph{L. chloropterus}, blue: \emph{L. elisabeth}) and shaded areas indicate the standard deviation of the spectral data.}
\label{figure:distplot}
\end{figure}

\clearpage

\begin{figure}
\centering
\includegraphics{fig/ms-new_volplot-2}
\caption{Colourspace occupied by \emph{L. chloropterus} (blue) and \emph{L. elisabeth} (red). Convex hulls volume overlap (similar colourspace occupied) is shown in grey. For reference, tetrahedron in lower right corner shows \{\textit{usml}\} colour vertices and location of points in colourspace as indicated by an `x'.}
\label{figure:volplot}
\end{figure}

\clearpage

\setcounter{figure}{0}
\makeatletter 
\renewcommand{\thefigure}{S\@arabic\c@figure} 

\section{Supporting Information}

\subsection{Exact determination of volume overlap}

To validate the exact solution for the multidimensional convex hull overlap used to obtain the color
volume overlap implemented in \pavo{}, we defined two sets of points in three-dimensional space that
defined two cubes, with side lengths of 1.0 and 0.5, respectively. Thus, the volumes of these two
cubes are $V_1=1^3=1$ and $V_2=0.5^3=0.125$. We then shifted the x coordinates of the smaller cube
by 0.4 to make the linear overlap along this axis $x_{overlap}=0.5 - 0.4 = 0.1$  (Figure
\ref{figure:cubes}), giving an overlap volume of $V_3=0.1*0.5^2=0.025$. We then calculated the known
proportional overlap volume based on the exclusion-inclusion principle as  $p_{overlap} =
V_3/(V_2+(V_1-V_3)) = .02272727$ (see Figure \ref{figure:cubes}). Finally, we used the
\code{voloverlap} function to estimate the proportional overlap and found that the value calculated
by \code{voloverlap} for this set of points matched exactly (dashed line in \ref{figure:overlap}).

To further show the benefit of an exact versus approximate solution (i.e. using Monte Carlo
simulation), we compared the accuracy and precision of the Monte Carlo method described in
\cite{Stoddard:2011} by running simulations over a range of MC sample sizes (\emph{n}): 100, 1000,
10000, and 100000. For each \emph{n}, we repeated the simulation a total of 10 times to estimate
confidence intervals and thus evaluate the precision of the estimates. The Monte Carlo method, while
eventually converging on the correct solution, requires large sample numbers (and, hence, is more
time-intensive) and can overestimate values at low MC sample numbers (see Figure
\ref{figure:overlap}).

\clearpage

\begin{figure}
\centering
\includegraphics[width=3in]{fig/si-mc_cubes}
\caption{Test geometries for validating \code{voloverlap}. Red and blue cubes are convex hulls enclosing all points, with overlap region shaded in grey.}
\label{figure:cubes}
\end{figure}


\begin{figure}
\centering
\includegraphics{fig/si-mc_overlap}
\caption{Results of Monte Carlo simulations of volume overlap compared to the exact result. Grey polygon shows 95\% confidence interval around estimated mean volume overlap (solid black line). Dashed line indicates true overlap and that calculated using \code{voloverlap} in \code{pavo}.}
\label{figure:overlap}
\end{figure}


\end{document}